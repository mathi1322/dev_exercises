c
class_wise.map{|k,v| [k, v.map{|x| x["Tamil"]}]}.to_h
class_wise.map{|k,v| [k, v.map{|x| x["Tamil"]}]}
class_wise.map{|k,v| [k, v.map{|x| x["Tamil"]}]}.map{|x| x.select{|x| x>40}.count}
class_wise.map{|k,v| v.map{|x| x["Tamil"]}}.map{|x| x.select{|x| x>40}.count}
class_wise.map{|k,v| v.map{|x| x["Tamil"]}}.map{|x| x.select{|x| x>40}}
class_wise.map{|k,v| v.map{|x| x["Tamil"]}}.to_h
class_wise.map{|k,v| v.map{|x| x["Tamil"]}}
class_wise.map{|k,v| v.map{|x| x["Tamil"]>=40}}
class_wise.select{|k,v| v.map{|x| x["Tamil"]>=40}}
class_wise.map{|k,v| v.select{|x| x["Tamil"]>=40}}
class_wise.map{|k,v| v.map{|x| x["Tamil"]>=40}}
class_wise.map{|k,v| v.map{|x| x["Tamil"]}}
class_wise[2].map{|x| x["Tamil"]}
class_wise.map{|k,v| v.map{|x| x.map{|key,val| key == "Tamil"}}
class_wise[2].map{|x| x.map{|key,val| key == "Tamil"}}
class_wise[2].map{|x| x.select{|key,val| key == "Tamil"}}
class_wise[2].map{|x| x["Tamil"]}
class_wise[2]
class_wise
class_wise.map{|key,value| value.group_by{|x| x.map{|k,v| k == "Tamil"}}}
class_wise.map{|key,value| value.group_by{|x| x["Tamil"]}}
class_wise.map{|key,value| value.group_by{|x| x.map{|k,v| [ k == "Tamil" , v ]}}}
class_wise.map{|key,value| value.group_by{|x| x.map{|k,v| [ k == Tamil , v ]}}}
class_wise.map{|key,value| value.group_by{|x| x["Tamil"]}}
class_wise
c
class_wise.sort.to_h
class_wise.to_a.sort
class_wise.to_a
class_wise.sort
class_wise
c
arr.map{|x| x.find_all{|x| x["Tamil"]>40}}
arr.map{|x| x.find_all{|x| x["Tamil"]>40}}.map{|x| x.count}
arr.map{|x| x.find_all{|x| x["Tamil"]>40}}.each{|x| x.count}
arr.map{|x| x.find_all{|x| x["Tamil"]>40}}.count
arr.map{|x| x.find_all{|x| x["Tamil"]>40}}
arr.map{|x| x.select{|x| x["Tamil"]>40}}
arr.map{|x| x.map{|x| x["Tamil"]>40}}
arr.each{|x| x.map{|x| x["Tamil"]>40}}
arr.each{|x| x.map{|x| x["Tamil"]>40}
arr
arr = class_wise.map{|k,v| v}
class_wise.map{|k,v| v}
class_wise.group_by{|k,v| v}
class_wise.each{|k,v| v}
class_wise.select{|k,v| v}
class_wise.map{|k,v| v}
class_wise
c
class_wise.map{|key,value| value.map{|x| x["Tamil"]>=40}}.map{|x| x.count}
class_wise.map{|key,value| value.find_all{|x| x["Tamil"]>=40}}.map{|x| x.count}
class_wise.map{|key,value| value.find_all{|x| x["Tamil"]>=40}}
class_wise.select{|key,value| value.find_all{|x| x["Tamil"]>=40}}
class_wise
c
Tamil39 = class_wise.map{|k,v| v.group_by{|x| x["Tamil"]>39}}
class_wise.map{|k,v| v.group_by{|x| x["Tamil"]>39}}
class_wise.map{|k,v| v.group_by{|x| x["Tamil"]>35}}
class_wise.map{|k,v| v.group_by{|x| x["Tamil"]}}
class_wise.each{|k,v| v.group_by{|x| x["Tamil"]}}
class_wise.each{|k,v| v.group_by}
class_wise.each{|k,v| v.each.group_by("Tamil")}
class_wise.each{|k,v| v.group_by("Tamil")}
class_wise
tamil_pass.map{|k,v| tamil_pass[k].count}
tamil_pass.map{|k,v| tamil_pass[k]}
tamil_pass.values
tamil_pass.keys
tamil_pass[keys]
tamil_pass[key]
tamil_pass[5]
tamil_pass[5].count
tamil_pass[2].count
tamil_pass[2]
tamil_pass = class_wise.select{|key,value| value.find_all{|x| x["Tamil"]>=35}}
c
data.select {|x| x["Maths"]>=35}c
data.find_all {|x| x["Maths"]>=35}
data.find {|x| x["Maths"]>=35}
data.select {|x| x["Maths"]>=35}
data.map {|x| x["Maths"]>=35}
data
class_wise.map{|x,y| y.max_by{|x| (x["Tamil"]+x["English"]+x["Maths"]+x["Science"]+x["Social"])}}
class_wise.map{|x,y| y.max{|x| (x["Tamil"]+x["English"]+x["Maths"]+x["Science"]+x["Social"])}}
class_wise.map{|x,y| y.max{|x| (x["Tamil"]+x["English"]+x["Maths"]+x["Science"]+x["Social"])}
class_wise.map{|x,y| y.max_by{|x| (x["Tamil"]+x["English"]+x["Maths"]+x["Science"]+x["Social"])}
class_wise
c
tamil = class_wise.select{|key,value| value.map{|x| x["Tamil"]>=35}}
tamil = class_wise.select{|key,value| value.map{|x| (x["Tamil"]>=35).count}}
tamil = class_wise.select{|key,value| value.map{|x| x["Tamil"]>=35}.count}
tamil = class_wise.select{|key,value| value.map{|x| x["Tamil"]>=35}}.count
tamil = class_wise.select{|key,value| value.map{|x| x["Tamil"]>=35}}
tamil = class_wise.select{|key,value| value.map{|x| x["Tamil"]}}
c
class_wise.map{|k,v| v.map{|x| x["Tamil"]>=35}}
class_wise.map{|k,v| v.select{|x| x["Tamil"]>=35}}
class_wise
pass
data
c
pass.push(class_wise.select{|key,value| value.map{|x| x["Tamil"]>=35}})
tamil = class_wise.select{|key,value| value.map{|x| x["Tamil"]>=35}}
class_wise.select{|key,value| value.map{|x| x["Tamil"]>=35}}
pass.push(tamil)
tamil = class_wise.map{|key,value| value.map{|x| x["Tamil"]<35}}
pass.push(tamil)
tamil = class_wise.map{|key,value| value.map{|x| x["Tamil"]>=35}}
class_wise = data.group_by{|x| x["Class"]}
pass
c
pass.methods
pass.push(tamil)
tamil = class_wise.map{|key,value| value.map{|x| x["Tamil"]>=35}}
class_wise = data.group_by{|x| x["Class"]}
c
b = []
a.map{|key,value| value.map{|x| x["Tamil"]<35}}
a.map{|key,value| value.mao{|x| x["Tamil"]<35}}
a.map{|key,value| value.each{|x| x["Tamil"]<35}}
a.map{|key,value| value.each{|x| x["Tamil"]>=35}}
a.map{|key,value| value.map{|x| x["Tamil"]>=35}}
a.each{|key,value| value.map{|x| x["Tamil"]>=35}}
a.each{|key,value| value.each{|x| x["Tamil"]>=35}}
a = data.group_by{|x| x["Class"]}
data.group_by{|x| x["Class"]}
b = a.map{|key,value| value.map{|x| x["Tamil"]}}
a.map{|key,value| value.map{|x| x["Tamil"]}}
a.collect{|key,value| value.select{|x| x["Tamil"]>=35}}
a.collect{|key,value| value.collect{|x| x["Tamil"]>=35}}
a.collect{|key,value| value.map{|x| x["Tamil"]>=35}}
a.map{|key,value| value.map{|x| x["Tamil"]>=35}}
a.map{|key,value| value.map{|x| x["Tamil"]}}
a
a = data.group_by{|x| x["Class"]}
data.group_by{|x| x["Class"]}
data
c
class_wise
data.group_by{|x| x["Class"]}.keys.sort
data.group_by{|x| x["Class"]}.values
data.group_by{|x| x["Class"]}.values.sort
data.group_by{|x| x["Class"]}.keys.sort
data.group_by{|x| x["Class"]}.keys
class_wise
class_wise.map { |x| x["1"]}
class_wise.map { |x| x["Tamil"]}
class_wise
class_wise.keys.sort
data.group_by{|x| x["Class"]}.sort
class_wise.keys
class_wise.values
class_wise.keys
class_wise.methods.sort
class_wise.select{|x| x["Tamil"]}
class_wise.map{|x| x["Tamil"]}
class_wise = data.group_by{|x| x["Class"]}
data.group_by{|x| x["Class"]}
students.each["first_name"]
students.each{|x| x["first_name"]}
students.each
students.methods.sort
students[0]["first_name"]
students = data.find_all{ |x| x["Maths"] == maths_highscore["Maths"]}
data.find_all{ |x| x["Maths"] == maths_highscore["Maths"]}
data.group_by{|x| x["Class"]}
data.group_by
data.methods.sort
maths_highscore[0]
maths_highscore
